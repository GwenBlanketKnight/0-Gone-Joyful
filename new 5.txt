
https://github.com/jecrell/Star-Wars---The-Force/tree/master/Source/ProjectJedi
https://steamcommunity.com/sharedfiles/filedetails/?id=1777036482
https://rimworldwiki.com/wiki/Biomes  
https://github.com/Mehni/ExampleJob/wiki
https://github.com/alextd/RimWorld-CrazyCatLady
https://pastebin.com/sQnhy3xm
https://pastebin.com/8kG8jFRX

//pawn.HostileTo(pawn.Faction);
                            List<DirectPawnRelation> directRelations = pawn.relations.DirectRelations;
                            DirectPawnRelation directPawnRelation = directRelations[i];
                            Pawn otherPawn = directPawnRelation.otherPawn;
                            //directPawnRelation.def == PawnRelationDefOf.Bond;
                            if (directPawnRelation.def == PawnRelationDefOf.Bond && !otherPawn.Dead && otherPawn.Spawned && otherPawn.Faction == Faction.OfPlayer && otherPawn.training.HasLearned(TrainableDefOf.Obedience) && pawn.skills.GetSkill(SkillDefOf.Animals).Level >= TrainableUtility.MinimumHandlingSkill(otherPawn))
                            {
                            }
                            //float tesr = pawn.health.capacities.GetLevel(Talking Hearing)
                            //pawn.NonHumanlikeOrWildMan
                            //CatatonicBreakdown pawn.mindState.mentalStateHandler.TryStartMentalState
        //if (pawn.Map.windManager.WindSpeed > 0.1f)
        //if (pawn.Map.weatherManager.curWeather == WeatherDef.Named("SnowHard"))
        //if (pawn.Map.weatherManager.RainRate > 0.10f)
        //if (pawn.Position.IsInPrisonCell(pawn.Map))
        //if (pawn.Position.CloseToEdge(pawn.Map, 20))
        //if (pawn.Position.Roofed(pawn.Map))
        //if (pawn.Downed)
        //if (pawn.Drafted)
        //pawn.IsPrisonerOfColony
        //pawn.IsPrisonerInPrisonCell
        //if (pawn.InMentalState)
        //if (pawn.InAggroMentalState)
        //if (pawn.Map.IsPlayerHome)
        //bool GBKT_MovineWAterTileCheck = pawn.Position.SupportsStructureType(pawn.Map, TerrainAffordanceDefOf.MovingFluid);
        // if (pawn.stances.Staggered) not sure hwo to test for
        //if (pawn.IsFreeColonist) seesm to jsut trigger all the time?
        //if (pawn.HitPoints > 50)
        //if (pawn.Map.TileInfo.swampiness > 0) seems to grant the bonus if the map the pawn is on is a swamp map
        //if (pawn.Map.TileInfo.rainfall > 0) seems to grant the bonus if the map the pawn is on is a swamp map
        // if (ticksUntillNextInspirationCheck < 1)
        //{
        //  bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_TestHediff, GBKT_BodyPartDef);
        //        float test = pawn.Map.Biome.plantDensity;
        //}SupportsStructureType(pawn.Map, TerrainAffordanceDefOf.MovingFluid) == true)
        //string test = pawn.Map.Biome.ToString();
        //if (test == "Desert")
        //bool test = pawn.Position.SupportsStructureType(pawn.Map, TerrainAffordanceDefOf.MovingFluid); GrowSoil Diggable SmoothableStone Heavy Medium Light
        //string test = pawn.Map.weatherManager.ToString(); check if clear.
        //string test = Faction.OfPlayer.def.techLevel.ToString(); Undefined Neolithic Animal Medieval Industrial Spacer Ultra Archotech
        // pawn.Destroy(DestroyMode.Vanish); use this to make a geat one go away after 15 days
        //bool test = pawn.Faction.IsPlayer;
        //pawn.Map.weatherManager.curWeather.accuracyMultiplier
        //  pawn.Map.weatherManager.curWeather.exposedThought
        //pawn.Map.weatherManager.curWeather.moveSpeedMultiplier
        //float what = pawn.Map.TileInfo.temperature;
        // bool test = pawn.IsCaravanMember();
        // bool tester = pawn.InCaravanBed();
        //string test = pawn.CurJobDef.ToString();
        //pawn.health.DropBloodFilth();
        //bool esterer = pawn.InBed();
        // string PawnsCurrentJobSpeed = pawn.CurJob.locomotionUrgency.ToString();
        //string PawnsCurrentJob = pawn.CurJobDef.joyKind.ToString();

                            
						

                                string IsTileIceTile = pawn.Position.GetTerrain(pawn.Map).defName;
                                if (IsTileIceTile == "Ice")
                                {
                                    bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBTK_DefinitionTypes.GBTK_DefinitionTypes_Hediff.GBKT_Aquaphile_On_Water_Tile, GBKT_BodyPartDef);
                                }	
    
                                    float GBKT_JoyLevel = pawn.needs.joy.CurLevelPercentage;
                                    if (GBKT_JoyLevel < 25.00f)
                                    {
                                        pawn.needs.joy.GainJoy(1.0000001f, GBKT_TraitDefOf.Meditative);
                                        bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_SkyGazerSeesSky, GBKT_BodyPartDef);
                                    }
                                    if (pawn.Awake() && GenLocalDate.HourInteger(pawn) >= 11 && GenLocalDate.HourInteger(pawn) <= 17)
                                    {

                                    }
<restFallFactor>0.75</restFallFactor>

<modExtensions>
    <li Class="YourNamespace.ModExtensionRequiredTrait">
        <requiredTrait>YourTrait</requiredTrait>
    </li>
</modExtensions>

PM] dninemfive: Then to read this required trait you'll want your own JoyGiver class with a check for that trait in a GetChance override
[6:43 PM] dninemfive: e.g.
class JoyGiver_YourJob : JoyGiver{
    public override Job GetChance(Pawn pawn){
        if(pawn.story.HasTrait(joyGiverDef.GetModExtension<ModExtensionRequiredTrait>()?.requiredTrait)) return 0f;
        return base.GetChance(pawn);
    }
}

                                //int test = pawn.Map.mapPawns.AllPawnsSpawnedCount;
                                //List<Pawn> list = pawn.Map.mapPawns.SpawnedPawnsInFaction(pawn.Map.ParentFaction).ToList<Pawn>();
                                //return p.health.hediffSet.AnyHediffMakesSickThought;
                                //list.RemoveAll((Pawn animal) => !animal.RaceProps.Animal || animal == pawn);
                                //List<Pawn> list2 = pawn.Map.mapPawns.AllPawnsSpawned.ToList<Pawn>();
                                //List<Pawn> list = pawn.Map.mapPawns.PrisonersOfColony.ToList<Pawn>();
6:43 PM] GwenBlanketKnight: so baiscaly clone the joy giver class, rename it, and modify it?
[6:45 PM] dninemfive: No, you should inherit it, my bad
[6:45 PM] GwenBlanketKnight: ah. that makes more sense
<JobDef>
<defName>MT_InspirePawn</defName>
<!-- Link to the JobDriver -->
<driverClass>MT_JobDriver_InspirePawn</driverClass>
<!-- Shown when the pawn is doing the job. TargetA gets translated. See next chapter. -->
<reportString>Inspiring TargetA.</reportString>
<!-- Whether or not colony animals can interact with the pawn while they are doing this job. Defaults to true. -->
<casualInterruptible>false</casualInterruptible>
<!-- Whether or not the Job can be "paused" without having to start over again. -->
<!-- Mostly used for hunting, hauling, refueling. Defaults to true.-->
<suspendable>false</suspendable>
</JobDef>
                                    float GBKT_JoyLevel = pawn.needs.joy.CurLevelPercentage;
                                    if (GBKT_JoyLevel < 25.00f)
                                    {
                                        pawn.needs.joy.GainJoy(1.0000001f, GBKT_TraitDefOf.Meditative);
                                        bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_SkyGazerSeesSky, GBKT_BodyPartDef);
                                    }
                                    if (pawn.Awake() && GenLocalDate.HourInteger(pawn) >= 11 && GenLocalDate.HourInteger(pawn) <= 17)
                                    {

                                    }
									
									
                            if (GBKT_TraitDef[i] == GBKT_TraitDefOf.GBKT_WindRunner)
                            {
                                float GBKT_FloatCheck = pawn.Map.windManager.WindSpeed;
                                if (GBKT_FloatCheck > 0.4f && GBKT_FloatCheck < 1.0f)
                                {
                                    bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_WindRunner1, GBKT_BodyPartDef);
                                }
                                else if (GBKT_FloatCheck > 0.9f && GBKT_FloatCheck < 1.5f)
                                {
                                    bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_WindRunner2, GBKT_BodyPartDef);
                                }
                                else if (GBKT_FloatCheck > 1.4f && GBKT_FloatCheck < 2.0f)
                                {
                                    bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_WindRunner3, GBKT_BodyPartDef);
                                }
                                else if (GBKT_FloatCheck > 1.9f)
                                {
                                    bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_WindRunner4, GBKT_BodyPartDef);
                                }
                            }
							
                            if (GBKT_TraitDef[i] == GBKT_TraitDefOf.GBKT_GreatOne)
                            {
                                pawn.Awake();
                                bool GBKT_SanityCheck = pawn.InMentalState;
                                if (GBKT_SanityCheck == true)
                                {
                                    // pawn.inventory.DropAllNearPawn(pawn.PositionHeld, true, false); not sure why this isn't going off
                                    // pawn.equipment.DropAllEquipment(pawn.PositionHeld, true);not sure why this isn't going off
                                    pawn.Destroy(DestroyMode.Vanish);
                                    //RandomSocialMode.Quiet
                                }
                            }
							
							
                            if (GBKT_TraitDef[i] == GBKT_TraitDefOf.GBKT_RiverDweller)
                            {
                                string GBKT_AmIOnAWetTile = pawn.Position.GetTerrain(pawn.Map).traversedThought.ToString();
                                if (GBKT_AmIOnAWetTile == "SoakingWet")
                                {
                                    bool tryThisHediff = HediffGiverUtility.TryApply(pawn, GBKT_TraitDefOf.GBKT_RiverDwellerOnWater, GBKT_BodyPartDef, true, 1);
                                    //pawn.CurJobDef.ChangeType<JobGiver_JumpInWater>();

                                    //HealthUtility.AdjustSeverity(pawn, GBKT_TraitDefOf.GBKT_RiverDwellerOnWater, 1);

                                    //pawn.health.AddHediff(GBKT_TraitDefOf.GBKT_RiverDwellerOnWater);
                                    //float healthpercent = pawn.health.summaryHealth.SummaryHealthPercent;
                                    //pawn.skills.AverageOfRelevantSkillsFor
                                    // pawn.health.RemoveHediff(GBKT_TraitDefOf.GBKT_RiverDwellerOnWater);
                                }
                                // if (pawn.Map.weatherManager.curWeather.exposedThought.ToString() == "SoakingWet") For some reason this isn't detecting even though it should
                                //pawn.needs.joy.GainJoy(1, GBKT_TraitDefOf.Meditative);
                            }
							
							
  <TraitDef>
    <defName>GBKT_GreatOne</defName>
    <commonality>0.1</commonality>
    <degreeDatas>
      <li>
        <label>Great One</label>
        <description>No one knows where the great ones come from or where they go to after they have served their time. For now, the great one {PAWN_nameDef}, exists on this plane but they will one day vanish into thin air along with everything they have on them.</description>
        <theOnlyAllowedMentalBreaks>
          <li>GiveUpExit</li>
        </theOnlyAllowedMentalBreaks>
        <randomMentalState>GiveUpExit</randomMentalState>
        <randomMentalStateMtbDaysMoodCurve>
          <points>
            <li>(0, 100)</li>
          </points>
        </randomMentalStateMtbDaysMoodCurve>
		<statFactors>
			<!-- Optional. Modifies pawn stats by multiplier -->
		</statFactors>
        <statOffsets>
			<PainShockThreshold>1.00</PainShockThreshold>
			<MeleeDodgeChance>10</MeleeDodgeChance>
			<MeleeHitChance>10</MeleeHitChance>
			<AimingDelayFactor>-0.50</AimingDelayFactor>
			<ShootingAccuracyPawn>25</ShootingAccuracyPawn>
			<ArmorRating_Blunt>0.5</ArmorRating_Blunt>
			<ArmorRating_Sharp>0.5</ArmorRating_Sharp>
			<ArmorRating_Heat>0.5</ArmorRating_Heat>
			<ImmunityGainSpeed>1.00</ImmunityGainSpeed>
			<CarryingCapacity>150</CarryingCapacity>
			<ToxicSensitivity>-1.00</ToxicSensitivity>
			
<!-- 			patch these values in if someone is using the supreme melee mod
			<SupremeMelee_MeleeParryMeleeChance>20</SupremeMelee_MeleeParryMeleeChance>
			<SupremeMelee_MeleeParryProjectileChance>20</SupremeMelee_MeleeParryProjectileChancce>
 -->
        </statOffsets>
		<skillGains>
			<li><key>Shooting</key><value>20</value></li>
			<li><key>Melee</key><value>20</value></li>
			<li><key>Construction</key><value>20</value></li>
			<li><key>Mining</key><value>20</value></li>
			<li><key>Cooking</key><value>20</value></li>
			<li><key>Plants</key><value>20</value></li>
			<li><key>Animals</key><value>20</value></li>
			<li><key>Crafting</key><value>20</value></li>
			<li><key>Artistic</key><value>20</value></li>
			<li><key>Medicine</key><value>20</value></li>
			<li><key>Social</key><value>20</value></li>
			<li><key>Intellectual</key><value>20</value></li>
		</skillGains>
		<marketValueFactorOffset>-2.00</marketValueFactorOffset>
      </li>
    </degreeDatas>
	<conflictingTraits>
		<!-- <li>GWT_Simple</li> -->
		<!-- <li>GWT_ColdResistant</li> -->
		<!-- <li>GWT_HeatResistant</li> -->
	</conflictingTraits>
  </TraitDef>
  
                                    //CONVINCING JOHN
                                    if (GBKT_TraitDef[i] == GBKT_DefinitionTypes.GBKT_DefinitionTypes_Traits.GBKT_ConvincingJohn)
                                    {
                                        if (pawn.health.capacities.GetLevel(GBKT_DefinitionTypes.GBTK_DefinitionTypes_CapacityDeff.Talking) > 0f && possibleFacPawn.health.capacities.GetLevel(GBKT_DefinitionTypes.GBTK_DefinitionTypes_CapacityDeff.Hearing) > 0f && !possibleFacPawn.HostileTo(pawn))
                                        {
                                            bool tryThisHediff = HediffGiverUtility.TryApply(possibleFacPawn, GBKT_DefinitionTypes.GBKT_DefinitionTypes_Hediff.GBKT_ConvincingJohnNear, GBKT_BodyPartDef);
                                        }
                                    }
                                if (PawnsCurrentJob == "GBKT_PlaceDirt")
                                {
                                    pawn.needs.joy.GainJoy(10f, GBTK_DefinitionTypes.GBTK_DefinitionTypes_JoyDeff.Meditative);
                                    pawn.ClearAllReservations(true);
                                    pawn.filth.GainFilth(GBTK_DefinitionTypes.GBTK_DefinitionTypes_ThingDeff.Filth_Dirt);
                                    pawn.filth.GainFilth(GBTK_DefinitionTypes.GBTK_DefinitionTypes_ThingDeff.Filth_Sand);
                                    pawn.filth.GetType().GetMethod("TryDropFilth", BindingFlags.Instance | BindingFlags.NonPublic).Invoke(pawn.filth, null);
                                }
  
                                if (room != null)
                                {
                                    Random random = new Random();
                                    int randomNumber = random.Next(0, 100);
                                    if(randomNumber >= 90)
                                    {
                                            //pawn.filth.GetType().GetMethod("TryDropFilth", BindingFlags.Instance | BindingFlags.NonPublic).Invoke(pawn.filth, null);
                                        
                                    }
                                }
								
								
  <Operation Class="PatchOperationAdd">
    <xpath>/Defs/JoyGiverDef[
  <!-- Meditative -->
	defName = "Meditate" or 
	defName = "Pray" or 
	defName = "GoForWalk" or 
	defName = "BuildSnowman" or 
	defName = "VisitGrave" or 
	defName = "ViewArt" or 
  <!-- Social -->
	defName = "SocialRelax" or 
	defName = "VisitSickPawn" or 
  <!-- dexterity play -->
	defName = "Play_Horseshoes" or 
	defName = "Play_Hoopstone" or 
	defName = "Play_Billiards" or 
  <!-- cerebral play -->
	defName = "Play_GameOfUr" or 
	defName = "Play_Chess" or 
	defName = "Play_Poker" or 
  <!-- television -->
	defName = "WatchTelevision" or 
  <!-- telescope -->
	defName = "UseTelescope" or 
  <!-- chemical consumption -->
	defName = "TakeDrug" or
  <!-- food consumption -->
	defName = "EatChocolate"
	]</xpath>
    <value>
		<modExtensions>
			<li Class="EBTools.RequiredTraitFramework.RequiredTrait_ModExtension">
			  <requiredTraitsAll>
			  </requiredTraitsAll>
			  <requiredTraitsOne>
			  </requiredTraitsOne>
			  <forbiddenTraits>
			  </forbiddenTraits>
			  <increaseChanceTraits>
			  </increaseChanceTraits>
			  <decreaseChanceTraits>
			  </decreaseChanceTraits>
			</li>
		</modExtensions>
    </value>
  </Operation>
  